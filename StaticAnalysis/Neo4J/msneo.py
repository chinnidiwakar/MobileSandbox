from py2neo import Graph, Node, Relationship
import re

pw = 'msneo' # After changing password from default password neo4j to msneo

def add_attribute(node, datadict, attribute, regex=None, upper=False):
    if attribute not in datadict: return
    if regex and not regex.match(datadict[attribute]): return

    if datadict[attribute] != '':
        node[attribute] = datadict[attribute]
        if upper: node[attribute] = node[attribute].upper()
    return node


# Transfer an Android Application node with feature vectors / attributes generated by the static or dynamic analyzer
# TODO Merge duplicates instead of creating a new node
# TODO Test for != ''
# TODO Error cases count > 1 print to stderr and do something
def create_node(datadict):
    print 'Transferring data to Neo4J database'
    # TODO: Move compiled regex to somewhere only executed once
    r_md5    = re.compile(r'[a-fA-F\d]{32}')
    r_sha1   = re.compile(r'[a-fA-F\d]{40}')
    r_sha256 = re.compile(r'[a-fA-F\d]{64}')

    graph = Graph(password=pw)
    tx = graph.begin()

    nagen = graph.find('Android', property_key='sha256', property_value=datadict['sha256'].upper())
    (first, count) = (True, 0)
    for i in range(1,3):
        try:
            if first:
                na = nagen.next()
                first = False
            else:
                _ = nagen.next()
            count += 1
        except StopIteration:
            break

    
    # Give error if we matched more than 1 nodes
    if count > 1:
        print 'ERROR: Found more than 1 Android nodes with SHA256 {}'.format(datadict['sha256'].upper())
        tx.commit()
        return

    # If we found the Android Application already in the Neo4J database, then we already did the following. Abort here
    if count == 1:
        print 'Neo4J: Found Android Node with sha256: {}'.format(datadict['sha256'])
        tx.commit()
        return

    # Create Android Node
    na = Node('Android')
    add_attribute(na, datadict, 'md5', regex=r_md5, upper=True)
    add_attribute(na, datadict, 'sha1', regex=r_sha1, upper=True)
    add_attribute(na, datadict, 'sha256', regex=r_sha256, upper=True)
    add_attribute(na, datadict, 'activities')
    add_attribute(na, datadict, 'package_name')
    add_attribute(na, datadict, 'apk_name')
    add_attribute(na, datadict, 'sdk_version')
    add_attribute(na, datadict, 'app_permissions')
    add_attribute(na, datadict, 'api_permissions')
    #add_attribute(na, datadict, 'api_calls') # TODO List of lists don't work yet
    add_attribute(na, datadict, 'features')
    add_attribute(na, datadict, 'intents')
    add_attribute(na, datadict, 's_and_r')
    add_attribute(na, datadict, 'interesting_calls')
    add_attribute(na, datadict, 'urls')
    add_attribute(na, datadict, 'networks')
    add_attribute(na, datadict, 'providers')
    add_attribute(na, datadict, 'included_files')
    add_attribute(na, datadict, 'detected_ad_networks')
    tx.create(na)
    print 'Neo4J: Created Android Node with sha256: {}'.format(datadict['sha256'])

    # Abort if Certificate Dict is empty
    if not datadict['cert']:
        tx.commit()
        return

    certdict = datadict['cert']

    ncgen = graph.find('Certificate', property_key='Sha1Thumbprint', property_value=certdict['Sha1Thumbprint'].upper())
    (first, count) = (True, 0)
    for i in range(1,3):
        try:
            if first:
                nc = ncgen.next()
                first = False
            else:
                _ = ncgen.next()
            count += 1
        except StopIteration:
            break

    # Give error if we matched more than 1 nodes
    if count > 1:
        print 'ERROR: Found more than 1 Certificate nodes with Sha1Thumbprint {}'.format(certdict['Sha1Thumbprint'].upper())
        tx.commit()
        return

    if count == 1:
        print 'Neo4J: Found Certificate Node with Sha1Thumbprint: {}'.format(certdict['Sha1Thumbprint'])

        # Create SIGNED_WITH Relationship between Android Application and Certificate. Then Abort
        r = Relationship(na, 'SIGNED_WITH', nc)
        tx.create(r)
        tx.commit()
        return

    # Create Certificate Node
    nc = Node('Certificate')
    add_attribute(nc, certdict, 'IssuerC')
    add_attribute(nc, certdict, 'IssuerCN')
    add_attribute(nc, certdict, 'IssuerDN')
    add_attribute(nc, certdict, 'IssuerE')
    add_attribute(nc, certdict, 'IssuerL')
    add_attribute(nc, certdict, 'IssuerO')
    add_attribute(nc, certdict, 'IssuerOU')
    add_attribute(nc, certdict, 'IssuerS')
    add_attribute(nc, certdict, 'SubjectC')
    add_attribute(nc, certdict, 'SubjectCN')
    add_attribute(nc, certdict, 'SubjectDN')
    add_attribute(nc, certdict, 'SubjectE')
    add_attribute(nc, certdict, 'SubjectKeyId')
    add_attribute(nc, certdict, 'SubjectL')
    add_attribute(nc, certdict, 'SubjectO')
    add_attribute(nc, certdict, 'SubjectOU')
    add_attribute(nc, certdict, 'SubjectS')
    add_attribute(nc, certdict, 'Rfc822Name')
    add_attribute(nc, certdict, 'SerialNumber')
    add_attribute(nc, certdict, 'Sha1Thumbprint', regex=r_sha1, upper=True)
    add_attribute(nc, certdict, 'validFromStr')
    add_attribute(nc, certdict, 'validToStr')
    add_attribute(nc, certdict, 'Version')
    tx.create(nc)
    print 'Neo4J: Created Certificate Node with Sha1Thumbprint: {}'.format(certdict['Sha1Thumbprint'])

    # Create SIGNED_WITH Relationship between Android Application and Certificate
    r = Relationship(na, 'SIGNED_WITH', nc)
    tx.create(r)

    # Abort if Public Key Dict is empty
    if certdict['pubkey']['keytype'] is None:
        tx.commit()
        return

    pubdict = certdict['pubkey']

    # TODO MATCH PublicKeys
    #np = graph.find('PublicKey', property_key='modulus', property_value=pubdict['modulus'])

    # Create Public Key Node
    np = Node('PublicKey')
    if pubdict['keytype'] == 'RSA':
        add_attribute(np, pubdict, 'keytype')
        add_attribute(np, pubdict, 'modulus')
        add_attribute(np, pubdict, 'exponent')
    elif pubdict['keytype'] == 'DSA':
        add_attribute(np, pubdict, 'keytype')
        add_attribute(np, pubdict, 'P')
        add_attribute(np, pubdict, 'Q')
        add_attribute(np, pubdict, 'G')
        add_attribute(np, pubdict, 'Y')
    elif pubdict['keytype'] == 'ECC':
        add_attribute(np, pubdict, 'keytype')
        pass

    tx.create(np)
    print 'Neo4J: Created PublicKey Node with keytype: {}'.format(pubdict['keytype'])

    # Create AUTHENTICATED_BY Relationship between Certificate and Public Key
    r = Relationship(nc, 'AUTHENTICATED_BY', np)
    tx.create(r)


    tx.commit()

def clean_all():
    graph = Graph(password=pw)
    tx = graph.begin()
    tx.run('MATCH (n) DETACH DELETE n')
    tx.commit()

def show_graph():
    graph = Graph(password=pw)
    graph.run('MATCH (n:Android) return n')
    graph.open_browser()
