from py2neo import Graph, Node
import re

pw = 'msneo' # After changing password from default password neo4j to msneo

def add_attribute(node, datadict, attribute, regex=None, upper=False):
    if attribute not in datadict: return
    if regex and not regex.match(datadict[attribute]): return

    if datadict[attribute] != '':
        node[attribute] = datadict[attribute]
        if upper: node[attribute] = node[attribute].upper()
    return node


# Transfer an Android Application node with feature vectors / attributes generated by the static or dynamic analyzer
# TODO Merge duplicates instead of creating a new node
def create_node(datadict):
    print 'Transferring data to Neo4J database'
    # TODO: Move compiled regex to somewhere only executed once
    r_md5    = re.compile(r'[a-fA-F\d]{32}')
    r_sha1   = re.compile(r'[a-fA-F\d]{40}')
    r_sha256 = re.compile(r'[a-fA-F\d]{64}')

    graph = Graph(password=pw)
    tx = graph.begin()

    n = Node('Android')
    add_attribute(n, datadict, 'md5', regex=r_md5, upper=True)
    add_attribute(n, datadict, 'sha1', regex=r_sha1, upper=True)
    add_attribute(n, datadict, 'sha256', regex=r_sha256, upper=True)
    add_attribute(n, datadict, 'activities')
    add_attribute(n, datadict, 'package_name')
    add_attribute(n, datadict, 'apk_name')
    add_attribute(n, datadict, 'sdk_version')
    add_attribute(n, datadict, 'app_permissions')
    add_attribute(n, datadict, 'api_permissions')
    #add_attribute(n, datadict, 'api_calls') # TODO List of lists don't work yet
    add_attribute(n, datadict, 'features')
    add_attribute(n, datadict, 'intents')
    add_attribute(n, datadict, 's_and_r')
    add_attribute(n, datadict, 'interesting_calls')
    add_attribute(n, datadict, 'urls')
    add_attribute(n, datadict, 'networks')
    add_attribute(n, datadict, 'providers')
    add_attribute(n, datadict, 'included_files')
    add_attribute(n, datadict, 'detected_ad_networks')
    print 'Neo4J: Created Android Node with sha256: {}'.format(datadict['sha256'])
    tx.create(n)

    if datadict['cert']:
        n = Node('Certificate')
        certdict = datadict['cert']
        add_attribute(n, certdict, 'IssuerC')
        add_attribute(n, certdict, 'IssuerCN')
        add_attribute(n, certdict, 'IssuerDN')
        add_attribute(n, certdict, 'IssuerE')
        add_attribute(n, certdict, 'IssuerL')
        add_attribute(n, certdict, 'IssuerO')
        add_attribute(n, certdict, 'IssuerOU')
        add_attribute(n, certdict, 'IssuerS')
        add_attribute(n, certdict, 'SubjectC')
        add_attribute(n, certdict, 'SubjectCN')
        add_attribute(n, certdict, 'SubjectDN')
        add_attribute(n, certdict, 'SubjectE')
        add_attribute(n, certdict, 'SubjectKeyId')
        add_attribute(n, certdict, 'SubjectL')
        add_attribute(n, certdict, 'SubjectO')
        add_attribute(n, certdict, 'SubjectOU')
        add_attribute(n, certdict, 'SubjectS')
        add_attribute(n, certdict, 'Rfc822Name')
        add_attribute(n, certdict, 'SerialNumber')
        add_attribute(n, certdict, 'Sha1Thumbprint')
        add_attribute(n, certdict, 'validFromStr')
        add_attribute(n, certdict, 'validToStr')
        add_attribute(n, certdict, 'Version')
        print 'Neo4J: Created Certificate Node with Sha1Thumbprint: {}'.format(certdict['Sha1Thumbprint'])
        tx.create(n)

        pubdict = certdict['pubkey']
        n = Node('PublicKey')
        if pubdict['keytype'] == 'RSA':
            add_attribute(n, pubdict, 'keytype')
            add_attribute(n, pubdict, 'modulus')
            add_attribute(n, pubdict, 'exponent')
        elif pubdict['keytype'] == 'DSA':
            add_attribute(n, pubdict, 'keytype')
            add_attribute(n, pubdict, 'P')
            add_attribute(n, pubdict, 'Q')
            add_attribute(n, pubdict, 'G')
            add_attribute(n, pubdict, 'Y')
        elif pubdict['keytype'] == 'ECC':
            add_attribute(n, pubdict, 'keytype')
            pass

        if pubdict['keytype'] is not None:
            tx.create(n)
            print 'Neo4J: Created PublicKey Node with keytype: {}'.format(pubdict['keytype'])

    tx.commit()

def clean_all():
    graph = Graph(password=pw)
    tx = graph.begin()
    tx.run('MATCH (n:Android) DELETE n')
    tx.commit()

def show_graph():
    graph = Graph(password=pw)
    graph.run('MATCH (n:Android) return n')
    graph.open_browser()
